{
  "file": "font-picker.tsx",
  "order": 1,
  "body": {
    "raw": "\n```tsx\n\"use client\";\n\nimport type { GoogleFont } from \"@/lib/fonts\";\nimport * as React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, Filter } from \"lucide-react\";\nimport { FixedSizeList as List } from \"react-window\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@/components/ui/command\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { fetchGoogleFonts, loadFont } from \"@/lib/fonts\";\nimport { cn } from \"@/lib/utils\";\n\nfunction FontListItem({\n  font,\n  isSelected,\n  onSelect,\n}: {\n  font: GoogleFont;\n  isSelected: boolean;\n  onSelect: () => void;\n}) {\n  const [isFontLoaded, setIsFontLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!isFontLoaded) {\n      loadFont(font.family)\n        .then(() => setIsFontLoaded(true))\n        .catch((error) => console.error(\"Failed to load font:\", error));\n    }\n  }, [isFontLoaded, font.family]);\n\n  return (\n    <CommandItem\n      value={font.family}\n      onSelect={onSelect}\n      className=\"data-[selected=true]:bg-accent flex cursor-pointer items-center gap-2 p-2\"\n      data-selected={isSelected}\n    >\n      <Check\n        className={cn(\n          \"h-3 w-3 shrink-0\",\n          isSelected ? \"opacity-100\" : \"opacity-0\",\n        )}\n      />\n      <div className=\"flex flex-col gap-1\">\n        <span className=\"text-sm font-medium\">{font.family}</span>\n        <span\n          className={cn(\n            \"text-muted-foreground text-xs transition-opacity duration-300\",\n            isFontLoaded ? \"opacity-100\" : \"opacity-0\",\n          )}\n          style={{\n            fontFamily: isFontLoaded ? font.family : \"system-ui\",\n          }}\n        >\n          The quick brown fox\n        </span>\n      </div>\n    </CommandItem>\n  );\n}\n\ninterface FontPickerProps {\n  onChange?: (font: GoogleFont[\"family\"]) => void;\n  value?: string;\n  width?: string | number;\n  height?: string | number;\n  className?: string;\n  showFilters?: boolean;\n}\n\nexport function FontPicker({\n  onChange,\n  value,\n  width = \"300px\",\n  height = \"300px\",\n  className,\n  showFilters = true,\n}: FontPickerProps) {\n  const [selectedFont, setSelectedFont] = React.useState<GoogleFont | null>(\n    null,\n  );\n  const [search, setSearch] = React.useState(\"\");\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selectedCategory, setSelectedCategory] = React.useState<string>(\"all\");\n  const listRef = React.useRef<List>(null);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  const { data: fonts, isLoading } = useQuery<GoogleFont[]>({\n    queryKey: [\"google-fonts\"],\n    queryFn: fetchGoogleFonts,\n    staleTime: 24 * 60 * 60 * 1000, // 24 hours\n    gcTime: 24 * 60 * 60 * 1000, // 24 hours\n  });\n\n  const categories = React.useMemo(() => {\n    if (!fonts) return [];\n    const uniqueCategories = new Set(fonts.map((font) => font.category));\n    return Array.from(uniqueCategories).sort();\n  }, [fonts]);\n\n  const filteredFonts = React.useMemo(() => {\n    if (!fonts) return [];\n    return fonts.filter((font: GoogleFont) => {\n      const matchesSearch = font.family\n        .toLowerCase()\n        .includes(search.toLowerCase());\n      const matchesCategory =\n        !showFilters ||\n        selectedCategory === \"all\" ||\n        font.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    });\n  }, [fonts, search, selectedCategory, showFilters]);\n\n  const handleSelectFont = React.useCallback(\n    (font: GoogleFont) => {\n      setSelectedFont(font);\n      onChange?.(font.family);\n      setIsOpen(false);\n    },\n    [onChange],\n  );\n\n  const handleOpenChange = React.useCallback((open: boolean) => {\n    setIsOpen(open);\n  }, []);\n\n  const Row = React.useCallback(\n    ({ index, style }: { index: number; style: React.CSSProperties }) => {\n      const font = filteredFonts[index];\n      return (\n        <div style={style}>\n          <FontListItem\n            font={font}\n            isSelected={selectedFont?.family === font.family}\n            onSelect={() => handleSelectFont(font)}\n          />\n        </div>\n      );\n    },\n    [filteredFonts, selectedFont, handleSelectFont],\n  );\n\n  return (\n    <Popover open={isOpen} onOpenChange={handleOpenChange}>\n      <PopoverTrigger asChild>\n        <Button\n          ref={buttonRef}\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          aria-label=\"Select font\"\n          className={cn(\"group relative justify-between\", className)}\n          style={{ width }}\n        >\n          <span className=\"truncate\">\n            {value\n              ? filteredFonts.find((font) => font.family === value)?.family\n              : \"Select font...\"}\n          </span>\n          <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\" style={{ width }} align=\"start\">\n        <Command>\n          <CommandInput\n            placeholder=\"Search fonts...\"\n            value={search}\n            onValueChange={setSearch}\n            className=\"border-none focus:ring-0\"\n          />\n          <div className=\"flex items-center justify-between gap-2 border-b px-3 py-1\">\n            {showFilters && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"hover:bg-accent flex h-8 items-center gap-2 px-2\"\n                  >\n                    <Filter className=\"text-muted-foreground h-4 w-4\" />\n                    <span className=\"text-sm capitalize\">\n                      {selectedCategory === \"all\"\n                        ? \"All Categories\"\n                        : selectedCategory}\n                    </span>\n                    <ChevronsUpDown className=\"ml-2 h-3 w-3 opacity-50\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\" className=\"w-[200px]\">\n                  <DropdownMenuRadioGroup\n                    value={selectedCategory}\n                    onValueChange={setSelectedCategory}\n                  >\n                    <DropdownMenuRadioItem value=\"all\">\n                      All Categories\n                    </DropdownMenuRadioItem>\n                    {categories.map((category) => (\n                      <DropdownMenuRadioItem\n                        key={category}\n                        value={category}\n                        className=\"capitalize\"\n                      >\n                        {category}\n                      </DropdownMenuRadioItem>\n                    ))}\n                  </DropdownMenuRadioGroup>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n            <span className=\"text-muted-foreground text-xs\">\n              {filteredFonts.length} fonts\n            </span>\n          </div>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center p-4\">\n              <div className=\"h-4 w-4 animate-spin rounded-full border-b-2 border-gray-900\" />\n            </div>\n          ) : (\n            <>\n              <CommandEmpty>No fonts found.</CommandEmpty>\n              <CommandGroup>\n                <div className={`h-[${height}px]`}>\n                  <List\n                    ref={listRef}\n                    height={400}\n                    itemCount={filteredFonts.length}\n                    itemSize={55}\n                    width=\"100%\"\n                  >\n                    {Row}\n                  </List>\n                </div>\n              </CommandGroup>\n            </>\n          )}\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n```",
    "code": "var Component=(()=>{var ae=Object.create;var h=Object.defineProperty;var se=Object.getOwnPropertyDescriptor;var ce=Object.getOwnPropertyNames;var ie=Object.getPrototypeOf,le=Object.prototype.hasOwnProperty;var w=(t,o)=>()=>(o||t((o={exports:{}}).exports,o),o.exports),ue=(t,o)=>{for(var c in o)h(t,c,{get:o[c],enumerable:!0})},P=(t,o,c,m)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let i of ce(o))!le.call(t,i)&&i!==c&&h(t,i,{get:()=>o[i],enumerable:!(m=se(o,i))||m.enumerable});return t};var de=(t,o,c)=>(c=t!=null?ae(ie(t)):{},P(o||!t||!t.__esModule?h(c,\"default\",{value:t,enumerable:!0}):c,t)),fe=t=>P(h({},\"__esModule\",{value:!0}),t);var j=w((ye,D)=>{D.exports=React});var A=w(C=>{\"use strict\";(function(){function t(e){if(e==null)return null;if(typeof e==\"function\")return e.$$typeof===ee?null:e.displayName||e.name||null;if(typeof e==\"string\")return e;switch(e){case b:return\"Fragment\";case q:return\"Profiler\";case W:return\"StrictMode\";case H:return\"Suspense\";case Q:return\"SuspenseList\";case J:return\"Activity\"}if(typeof e==\"object\")switch(typeof e.tag==\"number\"&&console.error(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),e.$$typeof){case $:return\"Portal\";case X:return(e.displayName||\"Context\")+\".Provider\";case B:return(e._context.displayName||\"Context\")+\".Consumer\";case K:var n=e.render;return e=e.displayName,e||(e=n.displayName||n.name||\"\",e=e!==\"\"?\"ForwardRef(\"+e+\")\":\"ForwardRef\"),e;case Z:return n=e.displayName||null,n!==null?n:t(e.type)||\"Memo\";case _:n=e._payload,e=e._init;try{return t(e(n))}catch{}}return null}function o(e){return\"\"+e}function c(e){try{o(e);var n=!1}catch{n=!0}if(n){n=console;var r=n.error,s=typeof Symbol==\"function\"&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||\"Object\";return r.call(n,\"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",s),o(e)}}function m(e){if(e===b)return\"<>\";if(typeof e==\"object\"&&e!==null&&e.$$typeof===_)return\"<...>\";try{var n=t(e);return n?\"<\"+n+\">\":\"<...>\"}catch{return\"<...>\"}}function i(){var e=x.A;return e===null?null:e.getOwner()}function R(){return Error(\"react-stack-top-frame\")}function G(e){if(N.call(e,\"key\")){var n=Object.getOwnPropertyDescriptor(e,\"key\").get;if(n&&n.isReactWarning)return!1}return e.key!==void 0}function Y(e,n){function r(){F||(F=!0,console.error(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",n))}r.isReactWarning=!0,Object.defineProperty(e,\"key\",{get:r,configurable:!0})}function U(){var e=t(this.type);return k[e]||(k[e]=!0,console.error(\"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\")),e=this.props.ref,e!==void 0?e:null}function z(e,n,r,s,l,u,d,y){return r=u.ref,e={$$typeof:S,type:e,key:n,props:u,_owner:l},(r!==void 0?r:null)!==null?Object.defineProperty(e,\"ref\",{enumerable:!1,get:U}):Object.defineProperty(e,\"ref\",{enumerable:!1,value:null}),e._store={},Object.defineProperty(e._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:0}),Object.defineProperty(e,\"_debugInfo\",{configurable:!1,enumerable:!1,writable:!0,value:null}),Object.defineProperty(e,\"_debugStack\",{configurable:!1,enumerable:!1,writable:!0,value:d}),Object.defineProperty(e,\"_debugTask\",{configurable:!1,enumerable:!1,writable:!0,value:y}),Object.freeze&&(Object.freeze(e.props),Object.freeze(e)),e}function V(e,n,r,s,l,u,d,y){var a=n.children;if(a!==void 0)if(s)if(ne(a)){for(s=0;s<a.length;s++)E(a[s]);Object.freeze&&Object.freeze(a)}else console.error(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else E(a);if(N.call(n,\"key\")){a=t(e);var f=Object.keys(n).filter(function(re){return re!==\"key\"});s=0<f.length?\"{key: someKey, \"+f.join(\": ..., \")+\": ...}\":\"{key: someKey}\",O[a+s]||(f=0<f.length?\"{\"+f.join(\": ..., \")+\": ...}\":\"{}\",console.error(`A props object containing a \"key\" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />`,s,a,f,a),O[a+s]=!0)}if(a=null,r!==void 0&&(c(r),a=\"\"+r),G(n)&&(c(n.key),a=\"\"+n.key),\"key\"in n){r={};for(var v in n)v!==\"key\"&&(r[v]=n[v])}else r=n;return a&&Y(r,typeof e==\"function\"?e.displayName||e.name||\"Unknown\":e),z(e,a,u,l,i(),r,d,y)}function E(e){typeof e==\"object\"&&e!==null&&e.$$typeof===S&&e._store&&(e._store.validated=1)}var g=j(),S=Symbol.for(\"react.transitional.element\"),$=Symbol.for(\"react.portal\"),b=Symbol.for(\"react.fragment\"),W=Symbol.for(\"react.strict_mode\"),q=Symbol.for(\"react.profiler\");Symbol.for(\"react.provider\");var B=Symbol.for(\"react.consumer\"),X=Symbol.for(\"react.context\"),K=Symbol.for(\"react.forward_ref\"),H=Symbol.for(\"react.suspense\"),Q=Symbol.for(\"react.suspense_list\"),Z=Symbol.for(\"react.memo\"),_=Symbol.for(\"react.lazy\"),J=Symbol.for(\"react.activity\"),ee=Symbol.for(\"react.client.reference\"),x=g.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,N=Object.prototype.hasOwnProperty,ne=Array.isArray,T=console.createTask?console.createTask:function(){return null};g={\"react-stack-bottom-frame\":function(e){return e()}};var F,k={},te=g[\"react-stack-bottom-frame\"].bind(g,R)(),oe=T(m(R)),O={};C.Fragment=b,C.jsxDEV=function(e,n,r,s,l,u){var d=1e4>x.recentlyCreatedOwnerStacks++;return V(e,n,r,s,l,u,d?Error(\"react-stack-top-frame\"):te,d?T(m(e)):oe)}})()});var M=w((we,I)=>{\"use strict\";I.exports=A()});var he={};ue(he,{default:()=>ge,frontmatter:()=>me});var p=de(M()),me={file:\"font-picker.tsx\",order:1};function L(t){let o=Object.assign({pre:\"pre\",code:\"code\"},t.components);return(0,p.jsxDEV)(o.pre,{children:(0,p.jsxDEV)(o.code,{className:\"language-tsx\",children:`\"use client\";\n\nimport type { GoogleFont } from \"@/lib/fonts\";\nimport * as React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, Filter } from \"lucide-react\";\nimport { FixedSizeList as List } from \"react-window\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@/components/ui/command\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { fetchGoogleFonts, loadFont } from \"@/lib/fonts\";\nimport { cn } from \"@/lib/utils\";\n\nfunction FontListItem({\n  font,\n  isSelected,\n  onSelect,\n}: {\n  font: GoogleFont;\n  isSelected: boolean;\n  onSelect: () => void;\n}) {\n  const [isFontLoaded, setIsFontLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!isFontLoaded) {\n      loadFont(font.family)\n        .then(() => setIsFontLoaded(true))\n        .catch((error) => console.error(\"Failed to load font:\", error));\n    }\n  }, [isFontLoaded, font.family]);\n\n  return (\n    <CommandItem\n      value={font.family}\n      onSelect={onSelect}\n      className=\"data-[selected=true]:bg-accent flex cursor-pointer items-center gap-2 p-2\"\n      data-selected={isSelected}\n    >\n      <Check\n        className={cn(\n          \"h-3 w-3 shrink-0\",\n          isSelected ? \"opacity-100\" : \"opacity-0\",\n        )}\n      />\n      <div className=\"flex flex-col gap-1\">\n        <span className=\"text-sm font-medium\">{font.family}</span>\n        <span\n          className={cn(\n            \"text-muted-foreground text-xs transition-opacity duration-300\",\n            isFontLoaded ? \"opacity-100\" : \"opacity-0\",\n          )}\n          style={{\n            fontFamily: isFontLoaded ? font.family : \"system-ui\",\n          }}\n        >\n          The quick brown fox\n        </span>\n      </div>\n    </CommandItem>\n  );\n}\n\ninterface FontPickerProps {\n  onChange?: (font: GoogleFont[\"family\"]) => void;\n  value?: string;\n  width?: string | number;\n  height?: string | number;\n  className?: string;\n  showFilters?: boolean;\n}\n\nexport function FontPicker({\n  onChange,\n  value,\n  width = \"300px\",\n  height = \"300px\",\n  className,\n  showFilters = true,\n}: FontPickerProps) {\n  const [selectedFont, setSelectedFont] = React.useState<GoogleFont | null>(\n    null,\n  );\n  const [search, setSearch] = React.useState(\"\");\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selectedCategory, setSelectedCategory] = React.useState<string>(\"all\");\n  const listRef = React.useRef<List>(null);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  const { data: fonts, isLoading } = useQuery<GoogleFont[]>({\n    queryKey: [\"google-fonts\"],\n    queryFn: fetchGoogleFonts,\n    staleTime: 24 * 60 * 60 * 1000, // 24 hours\n    gcTime: 24 * 60 * 60 * 1000, // 24 hours\n  });\n\n  const categories = React.useMemo(() => {\n    if (!fonts) return [];\n    const uniqueCategories = new Set(fonts.map((font) => font.category));\n    return Array.from(uniqueCategories).sort();\n  }, [fonts]);\n\n  const filteredFonts = React.useMemo(() => {\n    if (!fonts) return [];\n    return fonts.filter((font: GoogleFont) => {\n      const matchesSearch = font.family\n        .toLowerCase()\n        .includes(search.toLowerCase());\n      const matchesCategory =\n        !showFilters ||\n        selectedCategory === \"all\" ||\n        font.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    });\n  }, [fonts, search, selectedCategory, showFilters]);\n\n  const handleSelectFont = React.useCallback(\n    (font: GoogleFont) => {\n      setSelectedFont(font);\n      onChange?.(font.family);\n      setIsOpen(false);\n    },\n    [onChange],\n  );\n\n  const handleOpenChange = React.useCallback((open: boolean) => {\n    setIsOpen(open);\n  }, []);\n\n  const Row = React.useCallback(\n    ({ index, style }: { index: number; style: React.CSSProperties }) => {\n      const font = filteredFonts[index];\n      return (\n        <div style={style}>\n          <FontListItem\n            font={font}\n            isSelected={selectedFont?.family === font.family}\n            onSelect={() => handleSelectFont(font)}\n          />\n        </div>\n      );\n    },\n    [filteredFonts, selectedFont, handleSelectFont],\n  );\n\n  return (\n    <Popover open={isOpen} onOpenChange={handleOpenChange}>\n      <PopoverTrigger asChild>\n        <Button\n          ref={buttonRef}\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          aria-label=\"Select font\"\n          className={cn(\"group relative justify-between\", className)}\n          style={{ width }}\n        >\n          <span className=\"truncate\">\n            {value\n              ? filteredFonts.find((font) => font.family === value)?.family\n              : \"Select font...\"}\n          </span>\n          <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\" style={{ width }} align=\"start\">\n        <Command>\n          <CommandInput\n            placeholder=\"Search fonts...\"\n            value={search}\n            onValueChange={setSearch}\n            className=\"border-none focus:ring-0\"\n          />\n          <div className=\"flex items-center justify-between gap-2 border-b px-3 py-1\">\n            {showFilters && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"hover:bg-accent flex h-8 items-center gap-2 px-2\"\n                  >\n                    <Filter className=\"text-muted-foreground h-4 w-4\" />\n                    <span className=\"text-sm capitalize\">\n                      {selectedCategory === \"all\"\n                        ? \"All Categories\"\n                        : selectedCategory}\n                    </span>\n                    <ChevronsUpDown className=\"ml-2 h-3 w-3 opacity-50\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\" className=\"w-[200px]\">\n                  <DropdownMenuRadioGroup\n                    value={selectedCategory}\n                    onValueChange={setSelectedCategory}\n                  >\n                    <DropdownMenuRadioItem value=\"all\">\n                      All Categories\n                    </DropdownMenuRadioItem>\n                    {categories.map((category) => (\n                      <DropdownMenuRadioItem\n                        key={category}\n                        value={category}\n                        className=\"capitalize\"\n                      >\n                        {category}\n                      </DropdownMenuRadioItem>\n                    ))}\n                  </DropdownMenuRadioGroup>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n            <span className=\"text-muted-foreground text-xs\">\n              {filteredFonts.length} fonts\n            </span>\n          </div>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center p-4\">\n              <div className=\"h-4 w-4 animate-spin rounded-full border-b-2 border-gray-900\" />\n            </div>\n          ) : (\n            <>\n              <CommandEmpty>No fonts found.</CommandEmpty>\n              <CommandGroup>\n                <div className={\\`h-[\\${height}px]\\`}>\n                  <List\n                    ref={listRef}\n                    height={400}\n                    itemCount={filteredFonts.length}\n                    itemSize={55}\n                    width=\"100%\"\n                  >\n                    {Row}\n                  </List>\n                </div>\n              </CommandGroup>\n            </>\n          )}\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n`},void 0,!1,{fileName:\"/Users/vinodpatidar/Desktop/shadcn-font-picker/content/snippets/_mdx_bundler_entry_point-32d1c163-c704-410b-afad-2c16e34299d9.mdx\",lineNumber:6,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/vinodpatidar/Desktop/shadcn-font-picker/content/snippets/_mdx_bundler_entry_point-32d1c163-c704-410b-afad-2c16e34299d9.mdx\",lineNumber:6,columnNumber:1},this)}function pe(t={}){let{wrapper:o}=t.components||{};return o?(0,p.jsxDEV)(o,Object.assign({},t,{children:(0,p.jsxDEV)(L,t,void 0,!1,{fileName:\"/Users/vinodpatidar/Desktop/shadcn-font-picker/content/snippets/_mdx_bundler_entry_point-32d1c163-c704-410b-afad-2c16e34299d9.mdx\"},this)}),void 0,!1,{fileName:\"/Users/vinodpatidar/Desktop/shadcn-font-picker/content/snippets/_mdx_bundler_entry_point-32d1c163-c704-410b-afad-2c16e34299d9.mdx\"},this):L(t)}var ge=pe;return fe(he);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
  },
  "_id": "snippets/font-picker.mdx",
  "_raw": {
    "sourceFilePath": "snippets/font-picker.mdx",
    "sourceFileName": "font-picker.mdx",
    "sourceFileDir": "snippets",
    "contentType": "mdx",
    "flattenedPath": "snippets/font-picker"
  },
  "type": "Snippet",
  "slug": "font-picker"
}