{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-picker",
  "type": "registry:block",
  "title": "Font Picker",
  "description": "A font picker component.",
  "dependencies": [
    "react-window",
    "@types/react-window"
  ],
  "registryDependencies": [
    "button",
    "command",
    "dropdown-menu",
    "popover"
  ],
  "files": [
    {
      "path": "components/ui/font-picker.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@/components/ui/command\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport type { GoogleFont } from \"@/lib/fonts\";\nimport { fetchGoogleFonts, loadFont } from \"@/lib/fonts\";\nimport { cn } from \"@/lib/utils\";\nimport { Check, ChevronsUpDown, Filter } from \"lucide-react\";\nimport * as React from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\n\n\nfunction FontListItem({\n  font,\n  isSelected,\n  onSelect,\n}: {\n  font: GoogleFont;\n  isSelected: boolean;\n  onSelect: () => void;\n}) {\n  const [isFontLoaded, setIsFontLoaded] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!isFontLoaded) {\n      loadFont(font.family)\n        .then(() => setIsFontLoaded(true))\n        .catch((error) => console.error(\"Failed to load font:\", error));\n    }\n  }, [isFontLoaded, font.family]);\n\n  return (\n    <CommandItem\n      value={font.family}\n      onSelect={onSelect}\n      className=\"data-[selected=true]:bg-accent flex cursor-pointer items-center gap-2 p-2\"\n      data-selected={isSelected}\n    >\n      <Check\n        className={cn(\n          \"h-3 w-3 shrink-0\",\n          isSelected ? \"opacity-100\" : \"opacity-0\",\n        )}\n      />\n      <div className=\"flex flex-col gap-1\">\n        <span className=\"text-sm font-medium\">{font.family}</span>\n        <span\n          className={cn(\n            \"text-muted-foreground text-xs transition-opacity duration-300\",\n            isFontLoaded ? \"opacity-100\" : \"opacity-0\",\n          )}\n          style={{\n            fontFamily: isFontLoaded ? font.family : \"system-ui\",\n          }}\n        >\n          The quick brown fox\n        </span>\n      </div>\n    </CommandItem>\n  );\n}\n\ninterface FontPickerProps {\n  onChange?: (font: GoogleFont[\"family\"]) => void;\n  value?: string;\n  width?: string | number;\n  height?: string | number;\n  className?: string;\n  showFilters?: boolean;\n}\n\nexport function FontPicker({\n  onChange,\n  value,\n  width = \"300px\",\n  height = \"300px\",\n  className,\n  showFilters = true,\n}: FontPickerProps) {\n  const [selectedFont, setSelectedFont] = React.useState<GoogleFont | null>(\n    null,\n  );\n  const [search, setSearch] = React.useState(\"\");\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selectedCategory, setSelectedCategory] = React.useState<string>(\"all\");\n  const [fonts, setFonts] = React.useState<GoogleFont[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<Error | null>(null);\n  const listRef = React.useRef<List>(null);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useEffect(() => {\n    const loadFonts = async () => {\n      try {\n        setIsLoading(true);\n        const fetchedFonts = await fetchGoogleFonts();\n        setFonts(fetchedFonts);\n        const font = fetchedFonts.find((font) => font.family === value);\n        if (font) {\n          setSelectedFont(font);\n        }\n        setError(null);\n      } catch (err) {\n        setError(\n          err instanceof Error ? err : new Error(\"Failed to load fonts\"),\n        );\n        console.error(\"Error loading fonts:\", err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadFonts();\n  }, [value]);\n\n  const categories = React.useMemo(() => {\n    const uniqueCategories = new Set(fonts.map((font) => font.category));\n    return Array.from(uniqueCategories).sort();\n  }, [fonts]);\n\n  const filteredFonts = React.useMemo(() => {\n    return fonts.filter((font: GoogleFont) => {\n      const matchesSearch = font.family\n        .toLowerCase()\n        .includes(search.toLowerCase());\n      const matchesCategory =\n        !showFilters ||\n        selectedCategory === \"all\" ||\n        font.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    });\n  }, [fonts, search, selectedCategory, showFilters]);\n\n  const handleSelectFont = React.useCallback(\n    (font: GoogleFont) => {\n      setSelectedFont(font);\n      onChange?.(font.family);\n      setIsOpen(false);\n    },\n    [onChange],\n  );\n\n  const handleOpenChange = React.useCallback((open: boolean) => {\n    setIsOpen(open);\n  }, []);\n\n  const Row = React.useCallback(\n    ({ index, style }: { index: number; style: React.CSSProperties }) => {\n      const font = filteredFonts[index];\n      return (\n        <div style={style}>\n          <FontListItem\n            font={font}\n            isSelected={selectedFont?.family === font.family}\n            onSelect={() => handleSelectFont(font)}\n          />\n        </div>\n      );\n    },\n    [filteredFonts, selectedFont, handleSelectFont],\n  );\n\n  return (\n    <Popover open={isOpen} onOpenChange={handleOpenChange}>\n      <PopoverTrigger asChild>\n        <Button\n          ref={buttonRef}\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={isOpen}\n          aria-haspopup=\"listbox\"\n          aria-label=\"Select font\"\n          className={cn(\"group relative justify-between\", className)}\n          style={{ width }}\n        >\n          <span className=\"truncate\">\n            {selectedFont\n              ? filteredFonts.find(\n                  (font) => font.family === selectedFont.family,\n                )?.family\n              : \"Select font...\"}\n          </span>\n          <ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\" style={{ width }} align=\"start\">\n        <Command>\n          <CommandInput\n            placeholder=\"Search fonts...\"\n            value={search}\n            onValueChange={setSearch}\n            className=\"border-none focus:ring-0\"\n          />\n          <div className=\"flex items-center justify-between gap-2 border-b px-3 py-1\">\n            {showFilters && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"hover:bg-accent flex h-8 items-center gap-2 px-2\"\n                  >\n                    <Filter className=\"text-muted-foreground h-4 w-4\" />\n                    <span className=\"text-sm capitalize\">\n                      {selectedCategory === \"all\"\n                        ? \"All Categories\"\n                        : selectedCategory}\n                    </span>\n                    <ChevronsUpDown className=\"ml-2 h-3 w-3 opacity-50\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\" className=\"w-[200px]\">\n                  <DropdownMenuRadioGroup\n                    value={selectedCategory}\n                    onValueChange={setSelectedCategory}\n                  >\n                    <DropdownMenuRadioItem value=\"all\">\n                      All Categories\n                    </DropdownMenuRadioItem>\n                    {categories.map((category) => (\n                      <DropdownMenuRadioItem\n                        key={category}\n                        value={category}\n                        className=\"capitalize\"\n                      >\n                        {category}\n                      </DropdownMenuRadioItem>\n                    ))}\n                  </DropdownMenuRadioGroup>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n            <span className=\"text-muted-foreground text-xs\">\n              {filteredFonts.length} fonts\n            </span>\n          </div>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center p-4\">\n              <div className=\"h-4 w-4 animate-spin rounded-full border-b-2 border-gray-900\" />\n            </div>\n          ) : error ? (\n            <div className=\"flex items-center justify-center p-4 text-sm text-red-500\">\n              Failed to load fonts. Please try again later.\n            </div>\n          ) : (\n            <>\n              <CommandEmpty>No fonts found.</CommandEmpty>\n              <CommandGroup>\n                <div className={`h-[${height}px]`}>\n                  <List\n                    ref={listRef}\n                    height={400}\n                    itemCount={filteredFonts.length}\n                    itemSize={55}\n                    width=\"100%\"\n                  >\n                    {Row}\n                  </List>\n                </div>\n              </CommandGroup>\n            </>\n          )}\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "lib/fonts.ts",
      "content": "export interface GoogleFont {\n  family: string;\n  variants: string[];\n  subsets: string[];\n  version: string;\n  lastModified: string;\n  files: Record<string, string>;\n  category: string;\n  kind: string;\n}\n\nconst API_KEY = process.env.NEXT_PUBLIC_GOOGLE_FONTS_API_KEY;\nconst API_URL = \"https://www.googleapis.com/webfonts/v1/webfonts\";\n\n// Cache for loaded font stylesheets\nconst loadedFonts = new Set<string>();\n\n// Cache for the Google Fonts API response\nlet fontsCache: GoogleFont[] | null = null;\nlet fontsCacheTimestamp: number | null = null;\nconst CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n\nexport async function fetchGoogleFonts(): Promise<GoogleFont[]> {\n  // Check if we have a valid cache\n  if (\n    fontsCache &&\n    fontsCacheTimestamp &&\n    Date.now() - fontsCacheTimestamp < CACHE_DURATION\n  ) {\n    return fontsCache;\n  }\n\n  if (!API_KEY) {\n    throw new Error(\"Google Fonts API key is not configured\");\n  }\n\n  try {\n    const response = await fetch(`${API_URL}?key=${API_KEY}&sort=popularity`);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch Google Fonts\");\n    }\n    const data = await response.json();\n    fontsCache = data.items;\n    fontsCacheTimestamp = Date.now();\n    return data.items;\n  } catch (error) {\n    // If fetch fails and we have a cache, return it even if expired\n    if (fontsCache) {\n      return fontsCache;\n    }\n    console.error(\"Error fetching Google Fonts:\", error);\n    throw error;\n  }\n}\n\nexport function getFontUrl(font: GoogleFont, variant = \"regular\"): string {\n  const fontFamily = font.family.replace(/\\s+/g, \"+\");\n  const fontVariant = variant === \"regular\" ? \"400\" : variant;\n  return `https://fonts.googleapis.com/css2?family=${fontFamily}:wght@${fontVariant}&display=swap`;\n}\n\nexport async function loadFont(\n  fontFamily: string,\n  variant = \"regular\",\n): Promise<void> {\n  if (loadedFonts.has(fontFamily)) {\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    const link = document.createElement(\"link\");\n    link.href = getFontUrl({ family: fontFamily } as GoogleFont, variant);\n    link.rel = \"stylesheet\";\n\n    link.onload = () => {\n      loadedFonts.add(fontFamily);\n      resolve();\n    };\n\n    link.onerror = () => {\n      reject(new Error(`Failed to load font: ${fontFamily}`));\n    };\n\n    document.head.appendChild(link);\n  });\n}\n\nexport interface FontPickerProps {\n  onFontSelect?: (font: GoogleFont) => void;\n  value?: string;\n}\n\nexport const FONT_CATEGORIES = [\n  \"serif\",\n  \"sans-serif\",\n  \"display\",\n  \"handwriting\",\n  \"monospace\",\n] as const;\n\nexport type FontCategory = (typeof FONT_CATEGORIES)[number];\n\nexport const FONT_WEIGHTS = [\n  \"100\",\n  \"200\",\n  \"300\",\n  \"400\",\n  \"500\",\n  \"600\",\n  \"700\",\n  \"800\",\n  \"900\",\n] as const;\n\nexport type FontWeight = (typeof FONT_WEIGHTS)[number];\n",
      "type": "registry:lib"
    }
  ]
}